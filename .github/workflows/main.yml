---
name: MSBuild

# yamllint disable-line rule:truthy
on:
  #手工触发
  workflow_dispatch:
  release:
    types:
      - published
  
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should
    # work equally well on Windows or Mac.  You can convert this to a matrix
    # build if you need cross-platform coverage.
    # yamllint disable-line rule:line-length
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
          #- os: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Fix Checkout
        run: |
          git fetch --force --tags
      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate
        # build directory. We'll use this as our working directory for all
        # subsequent commands
        run: sudo apt install -y libcppunit-dev

      #- name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment
        # variable access regardless of the host operating system
        #shell: bash
        #working-directory: ${{github.workspace}}
        # 注意具体configue文件所在目录，由于本仓库中没有configure文件跳过此步骤。
        # 本步骤中的G++配置被包含在了makefile文件中
        #run: ./configure

      - name: Build
        working-directory: ${{github.workspace}}
        #注意实际的工作目录
        shell: bash
        # Execute the build.  You can specify a specific target
        # with "--target <NAME>"
        run: make OPT=-DNOLIMIT

      - if: ${{ failure() }}
        name: Upload test data
        uses: actions/upload-artifact@v2
        with:
          name: tests-out
          path: tinyvpn_binaries.tar.gz
